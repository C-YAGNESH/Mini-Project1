# -*- coding: utf-8 -*-
"""CY_Tic_Tac_Toe

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17ZVf8heajoI8EgLHk4NLb84TLTDjlyti
"""

# Tic-Tac-Toe Game
#Executed by Yagnesh Challagundla

def printing_gameoutput(board):
    print("__________________")  # Printing the top border by printing the following: "
    print("\n|R\\C| 0 | 1 | 2 |") #It is necessary to print the column headings as per output file
    print("-----------------")
    for i, row in enumerate(board): # Printing the separator for the row in the enumerate(board) function:
        print(f"| {i} | {' | '.join(row)} |")
        if i < 2:
            print("-----------------") # A divider that is printed between rows

def restarting_game():
    return [[" " for _ in range(3)] for _ in range(3)] # Making a grid of no spaces that is three by three.

def checking_input(row, col, board):
    if not (0 <= row <= 2 and 0 <= col <= 2): # Verifying that the row and column are within the acceptable range.
        print("Invalid entry: try again.") # Determining if the cell that has been picked is already occupied.
        print("Row & column numbers must be either 0, 1, or 2.")
        return False
    if board[row][col] != " ":
        print("That cell is already taken.")
        print("Please make another selection.")
        return False
    return True

def validating_completeboard(board):
    return all(cell != " " for row in board for cell in row)

def validating_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True  # Checking the columns that are currently returned True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def validating_ending(board, player):
    if validating_winner(board, player):
        print(f"{player} IS THE WINNER!!!")  # Determining which player has been successful in winning the game.
        return True
    if validating_completeboard(board):
        print("DRAW! NOBODY WINS!") # Determining whether the players has been tied.
        return True
    return False # If the game has not yet come to a close then returning False.

def obtain_move():
    while True:
        try:
            move = input("Please enter row number and column number separated by a comma.\n")
            row, col = map(int, move.split(','))  # Dividing the input into integers and convert them.
            print(f"\033[31m{row}, {col}\033[0m") #Adding color red to the input entered by the user.
            print(f"You have entered row #{row}", end="\n")
            print(f"          and column #{col}")
            return row, col
        except ValueError:
            print("Invalid input. Please enter two numbers separated by a comma.")

def playing_game():
    board = restarting_game() # Initializing the game board
    current_player = "X"

    print("New Game: X goes first.")
    printing_gameoutput(board) # Presenting the first starting board that is empty

    while True:
        print(f"\n{current_player}'s turn.")
        print("Where do you want your", current_player, "placed?")

        row, col = obtain_move() # Determining the new move of the player

        if not checking_input(row, col, board): # If the move is invalid, asking for input once more, Continuing with the move validation
            continue

        board[row][col] = current_player
        print("Thank you for your selection.")
        printing_gameoutput(board)

        if validating_ending(board, current_player):
            break

        current_player = "O" if current_player == "X" else "X"

    play_again = input("Another game? Enter Y or y for yes.\n")
    return play_again.lower() == 'y' # The player should return True if they wish to continue playing.

# Main program
while True:
    if not playing_game():
        print("Thank you for playing!") # If the player does not wish to continue playing, they can exit the program and this message will pop-up.
        break